name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main, feature/**]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: rust-basic-api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: rust-basic-api/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy (pedantic)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings -W clippy::pedantic

      - name: Run tests
        run: cargo test --workspace --all-features

      - name: Build release
        run: cargo build --release --workspace

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-22.04
    needs: quality-checks
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./rust-basic-api
          file: ./rust-basic-api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install yamllint
        run: pip install yamllint

      - name: Create yamllint config
        run: |
          cat > .yamllint.yml << 'EOF'
          extends: default
          rules:
            line-length:
              max: 120
              level: warning
            trailing-spaces: enable
            empty-lines:
              max: 2
          EOF

      - name: Run yamllint
        run: yamllint -c .yamllint.yml .github/workflows/ rust-basic-api/docker-compose.yml || true
